@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "BattleShip powered by D.P.O.I.";
}

<link rel="stylesheet" href="~/Content/BattleShip.css" />
<link rel="stylesheet" href="~/Content/board2.css" />

<h2>Chat</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />

    <ul id="discussion"></ul>
    <div id="waiter" style="visibility: hidden;">
        <label id="status">Waiting for an opponent...</label>
        <br>
        <img src="~/Content/Images/spin.gif" alt="Wait">
    </div>

    <div id="actions" style="visibility: hidden;">
        <button id="btnSetShips" class="btn btn-default" onclick="setMap();">Set Ships</button>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div id="docks">
            </div>
        </div>

        <div class="col-md-4">
            <div id="gameboard">
                <div class="outer"></div>
            </div>
        </div>
        <div class="col-md-4">
            <div id="fireboard">
                <div class="outer"></div>
            </div>
        </div>
    </div>

    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>

        var BOARD_INDEX = 10;
        var SIZE = 40;
        var game;
        var ships = [];
        var GAMEBOARD = document.getElementById('gameboard');
        var DOCKS = document.getElementById('docks');

        function Ship(lifes,name) {
            this.lifes = lifes;
            this.position = new Position();
            this.isOnXAxis = true;
            this.name = name;
            this.hasBeenSet = false;
        }

        function Position() {
            this.xPosition = 0;
            this.yPosition = 0;
        }

        function setMap() {
            if (ships.filter(s => !s.hasBeenSet)[0] == undefined) {
                $('#carrier').off();
                $('#battleship').off();
                $('#destroyer').off();
                $('#submarine').off();
                $('#patrol').off();
                $('#carrier').attr('draggable', false);
                $('#battleship').attr('draggable', false);
                $('#destroyer').attr('draggable', false);
                $('#submarine').attr('draggable', false);
                $('#patrol').attr('draggable', false);
                game.server.setMap(ships);
                $("#btnSetShips").hide();
            } else {
                $('#statusModal').text("You must set all ships...");
                $('#notificationModal').modal('show');
            }
        }

        function startGame() {
            GAMEBOARD.style.opacity = 0.5;
            GAMEBOARD.parentElement.className = 'col-md-6';
            var docks = document.getElementById('docks');
            var parent = docks.parentElement;
            parent.parentElement.removeChild(parent);
            parent.removeChild(docks);
            //GAMEBOARD
            buildFireBoard();
        }

        $(function() {

            // Reference the auto-generated proxy for the hub.
            game = $.connection.gameHub;
            game.client.wait = wait;
            game.client.createGame = createGame;
            // Create a function that the hub can call back to display messages.
            game.client.addNewMessageToPage = addNewMessageToPage;

            game.client.receiveHitResponse = receiveHitResponse;
            game.client.beginTurn = beginTurn;
            game.client.startGame = startGame;
            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@User.Identity.GetUserName()');
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function() {
                $('#sendmessage').click(function() {
                    // Call the Send method on the hub.
                    game.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
                //game.server.joined();
                createGame();
            });
            $.connection.hub.disconnected(function() {
                setTimeout(function() {
                    $.connection.hub.start();
                }, 500);
            });
        });

// This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
        function genCellId(j, i) {
            return '' + j + '-' + i;
        };

        function wait(status) {
            $("#waiter").css("visibility", "visible");
            if (status == null) {
                status = "Waiting for an opponent ...";
            }
            $("#status").text(status);
        };

        function createGame() {
            $("#waiter").css("visibility", "hidden");
            $("#actions").css("visibility", "visible");

            buildBoard();
            loadShips();
        };

        function addNewMessageToPage(name, message) {
            // Add the message to the page.
            $('#discussion').append('<li><strong>' + htmlEncode(name)
                + '</strong>: ' + htmlEncode(message) + '</li>');
        };

        function buildBoard() {
            for (i = 0; i < BOARD_INDEX; i++) {
                for (j = 0; j < BOARD_INDEX; j++) {

                    // create a new div HTML element for each grid square and make it the right size
                    var square = document.createElement("div");
                    GAMEBOARD.children[0].appendChild(square);

                    // give each div element a unique id based on its row and column, like "s00"
                    square.id = genCellId(j, i);

                    // set each grid square's coordinates: multiples of the current row or column number
                    var topPosition = j * SIZE;
                    var leftPosition = i * SIZE;

                    // use CSS absolute positioning to place each grid square on the page
                    square.style.top = topPosition + 'px';
                    square.style.left = leftPosition + 'px';
                    square.className = 'cell normal';

                    square.addEventListener('dragenter', drag_enter, false);
                    square.addEventListener('dragleave', drag_leave, false);
                    square.addEventListener('dragenter', drag_over, false);
                    square.addEventListener('drop', drop, false);

                    document.body.addEventListener('dragover', drag_over, false);
                }
            }
        };

        function buildFireBoard() {
            //document.removeChild(document.getElementById('docks'));
            var newBoard = document.getElementById('fireboard').children[0];
            newBoard.innerHTML = "";
            for (i = 0; i < BOARD_INDEX; i++) {
                for (j = 0; j < BOARD_INDEX; j++) { // create a new div HTML element for each grid square and make it the right size
                    var square = document.createElement("div");
                    
                    newBoard.appendChild(square);

                    // give each div element a unique id based on its row and column, like "s00"
                    square.id = genCellId(j, i) + " f";

                    // set each grid square's coordinates: multiples of the current row or column number
                    var topPosition = j * SIZE;
                    var leftPosition = i * SIZE;

                    // use CSS absolute positioning to place each grid square on the page
                    square.style.top = topPosition + 'px';
                    square.style.left = leftPosition + 'px';
                    square.className = 'cell normal';

                    square.addEventListener('mouseenter', drag_enter, false);
                    square.addEventListener('mouseleave', drag_leave, false);
                    square.addEventListener('click', fire, false);
                }
            }
            newBoard.parentElement.parentElement.className = 'col-md-6';
        };


        function loadShips() {

            var carrier = document.createElement('div');
            carrier.id = 'carrier';
            var battleship = document.createElement('div');
            battleship.id = 'battleship';
            var destroyer = document.createElement('div');
            destroyer.id = 'destroyer';
            var submarine = document.createElement('div');
            submarine.id = 'submarine';
            var patrol = document.createElement('div');
            patrol.id = 'patrol';

            patrol.className = 'ships';
            submarine.className = 'ships';
            battleship.className = 'ships';
            destroyer.className = 'ships';
            carrier.className = 'ships';

            buildship(2, patrol, 1);
            buildship(3, submarine, 2);
            buildship(4, destroyer, 3);
            buildship(5, battleship, 4);
            buildship(6, carrier, 5);
        };

        function buildship(size, container, position) {

            var topPosition = position * SIZE;
            var leftPosition = SIZE;
            ships.push(new Ship(size,container.id));
            container.style.top = topPosition + 'px';
            container.style.left = leftPosition + 'px';
            container.style.width = size * SIZE + 'px';

            container.style.backgroundSize = (size * SIZE) + 'px' + ' 40px';

            container.draggable = true;
            container.style.zIndex = 1;
            DOCKS.appendChild(container);
            container.addEventListener('dragstart', drag_start, false);
            //$('#' + container.id).on('dragstart', drag_start);


        };

        function rotate(event) {
            event.preventDefault();

            var ship = document.getElementById(event.target.id);
            //var rotateValue = ship.rotateValue;
            if (validateRotation(ship)) {
                var shipInArray = ships.filter(s => s.name === event.target.id)[0];
                shipInArray.isOnXAxis = !shipInArray.isOnXAxis;

                //90*rotateValue
                ship.style.transform = 'rotate('+ 90 +'deg)';
                ship.style.transformOrigin = '12% 50%';

            }
            else {
                $('#statusModal').text("The Gameboard has it's limits; you must learn not to anger the Gameboard...");
                $('#notificationModal').modal('show');
            }
        };

        function drag_start(event) {
            var style = window.getComputedStyle(event.target, null);
            event.dataTransfer.setData("text/plain", event.target.id);
        };

        function drag_over(event) {
            event.preventDefault();
            return false;
        };

        function drag_enter(event) {
            event.preventDefault();
            var cell = document.getElementById(event.target.id);
            if (cell && cell.style.display != 'none')
                cell.className = 'cell hovered';         
        };

        function drag_leave(event) {
            event.preventDefault();
            var cell = document.getElementById(event.target.id);
            if (cell && cell.style.display != 'none')
                cell.className = 'cell normal';
        };

        function drop(event) {

            var ship = document.getElementById(event.dataTransfer.getData("text/plain"));
            var cell = document.getElementById(event.target.id);

            cell.className = 'cell normal';

            if (evaluateDrop(ship, cell)) {
                var shipOnArray = ships.filter(s => s.name === ship.id)[0];

                shipOnArray.position.xPosition = cell.id.split('-')[1];
                shipOnArray.position.yPosition = cell.id.split('-')[0];

                var shipHeight = getIntHeight(ship);
                var shipWidth = getIntWidth(ship);

                if (ship.style.width > ship.style.height) {
                    var cellsRemaining = (shipWidth / SIZE) - 1;
                    var origin = cell.id.split('-');
                    for (i = 1; i <= cellsRemaining; i++) {
                        let cellI = document.getElementById(origin[0] + '-' + (parseInt(origin[1]) + i));
                    }
                }
                else {
                    var cellsRemaining = (shipHeight / SIZE) - 1;
                    var origin = cell.id.split('-');
                    for (i = 1; i <= cellsRemaining; i++) {
                        let cellI = document.getElementById((parseInt(origin[0]) + i) + '-' + origin[1]);
                    }

                }
                ship.addEventListener('click', rotate);

                ship.style.top = 0;
                ship.style.left = 0;
                ship.className = 'ships';
                cell.appendChild(ship);

                handleShipPositioning(ship, ship.parentElement);

                shipOnArray.hasBeenSet = true;

            }
            else {
                $('#statusModal').text("The Gameboard has it's limits; you must learn not to anger the Gameboard...");
                $('#notificationModal').modal('show');
            }

            event.preventDefault();
            return false;

        };

        function getIntHeight(ship) {
            if (ship.style.height == '')
                return 40;
            return parseInt(ship.style.height.replace('px', ''));
        };

        function getIntWidth(ship) {
            if (ship.style.width == '')
                return 40;
            return parseInt(ship.style.width.replace('px', ''));
        };

        function validateRotation(ship) {
            var result;

            var cell = ship.parentElement;
            
            var projectedHeight = getIntWidth(ship);
            var projectedWidth = getIntHeight(ship);

            var exists;
            if (projectedHeight > projectedWidth) {
                var size = (projectedHeight / SIZE) - 1;
                var validString = cell.id.split('-')[0];
                exists = (parseInt(validString) + size) + '-' + cell.id.split('-')[1];
            }
            else {
                var size = (projectedWidth / SIZE) - 1;
                var validString = cell.id.split('-')[1];
                exists = cell.id.split('-')[0] + '-' + (parseInt(validString) + size);
            }

            if (document.getElementById(exists) && checkForOtherShips(projectedHeight,projectedWidth,cell,size))
                result = true;
            else result = false;

            return result;

        };

        function checkForOtherShips(height, width, cell,size) {
            var id = cell.id.split('-');
            var result = true;
            if (height > width) {
                for (i = parseInt(id[0]) + 1 ; i <= (parseInt(id[0]) + size) ; i++) {
                    var aux = document.getElementById(i + '-' + id[1]);
                    //if (aux && aux.style.display == 'none')
                    //    result = false;
                }
            }

            if (width > height) {
                for (i = parseInt(id[1]) + 1 ; i <= (parseInt(id[1]) + size) ; i++) {
                    //var aux = document.getElementById(id[0] + '-' + i);
                    //if (aux && aux.style.display == 'none')
                    //    result = false;
                }
            }
            return result;
        };

            function handleShipPositioning(ship, cell) {
           
                var size = (getIntWidth(ship) / SIZE) - 1;

                var position = cell.id.split('-');
                var exists = position[0] + '-' + (parseInt(position[1]) + size);

                if (!document.getElementById(exists)) {
                    var width = ship.style.width;
                    var height = ship.style.height;
                    ship.style.height = width;
                    ship.style.width = height;
                    var shipInArray = ships.filter(s => s.name === event.target.id)[0];
                    shipInArray.isOnXAxis = false;
                }
                
            };

            function evaluateDrop(ship, cell) {
                //var position = cell.id.split('-');
                //var size = (getIntWidth(ship) / SIZE) - 1;

                //var analyzeXAxis = document.getElementById((parseInt(position[0] + size) + '-' + position[1]));
                //var analyzeYAxis = document.getElementById(position[0] + '-' + (parseInt(position[1] + size)));

                //if (analyzeXAxis && analyzeYAxis)
                //    return true;
                //else
                //    return false;

                var position = cell.id.split('-');
                var size = (getIntWidth(ship) / SIZE) - 1;

                var analyzeXAxis = document.getElementById((parseInt(position[1]) + size) + '-' + position[0]);
                var analyzeYAxis = document.getElementById(position[1] + '-' + (parseInt(position[0]) + size));
                if ((ship.style.width > ship.style.height || ship.style.height == "") && analyzeXAxis) {
                    return true;
                } else if ((ship.style.height > ship.style.width || ship.style.width == "") && analyzeYAxis) {
                    return true;
                }

                return false;
            };

            function fire() {
                //TODO add call to sendHitToServer
                var cell = document.getElementById(event.target.id);
            };

            function receiveHitResponse(coordinates, wasHit, hasGameEnded) {
                //draw();
                endTurn();
            };

            function sendHitToServer(coordinates) {
                game.server.hit(coordinates);
            }

            function beginTurn() {
                $("#waiter").css("visibility", "hidden");
                $("#statusModal").text("Its your turn now!!");
                $('#notificationModal').modal('show');
            }

            function endTurn() {
                game.server.endTurn();
            }
        </script>
    }
</div>

<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="deleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="top: 100px;">
            <div class="modal-header">
                <h4 class="modal-title" id="deleteLabel">Notification</h4>
            </div>
            <div class="modal-body">


                <p id="statusModal">Its your turn now!!</p>
            </div>

        </div>
    </div>
</div>

